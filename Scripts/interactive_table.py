# -*- coding: utf-8 -*-
"""interactive table.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MsSEwkGDBfJdlfEcs_i8jHDhh1djcWIW
"""

# Script: interactive table.py
# Description:
#Reads the compatibility matrix file obtained from funtional analysis.py
#and creates an interactive table to help visualize and analyse results


!pip install dash pandas plotly --quiet

import pandas as pd
from dash import Dash, html, dcc, dash_table, Input, Output, State, ctx
from dash.dash import no_update

# Carregar dados
df = pd.read_csv("compatibility_table_with_names.csv")

# Op√ß√µes √∫nicas
bacteria_options = ["All"] + sorted(df["Bacterium"].dropna().unique())
pathway_options = ["All"] + sorted(df["Pathway Name"].dropna().unique())
enzyme_options = ["All"] + sorted(df["Enzyme Name"].dropna().unique())

# Inicializar app
app = Dash(__name__)
app.title = "Enzyme‚ÄìPathway‚ÄìBacteria Viewer"

app.layout = html.Div([
    html.H1("üî¨ Enzyme‚ÄìPathway‚ÄìBacteria Compatibility Viewer"),

    html.Label("Select Bacterium:"),
    dcc.Dropdown(
        id="bacterium-dropdown",
        options=[{"label": b, "value": b} for b in bacteria_options],
        value=["All"],
        multi=True
    ),

    html.Label("Select Pathway:"),
    dcc.Dropdown(
        id="pathway-dropdown",
        options=[{"label": p, "value": p} for p in pathway_options],
        value=["All"],
        multi=True
    ),

    html.Label("Select Enzyme:"),
    dcc.Dropdown(
        id="enzyme-dropdown",
        options=[{"label": e, "value": e} for e in enzyme_options],
        value=["All"],
        multi=True
    ),

    html.Br(),

    html.Button("‚¨áÔ∏è Download Filtered Data as CSV", id="download-button-data", n_clicks=0),
    dcc.Download(id="download-dataframe-csv"),

    html.Br(), html.Br(),

    dash_table.DataTable(
        id="table", page_size=10,
        style_table={'overflowX': 'auto'},
        style_cell={'textAlign': 'left'}
    ),

    html.Br(),
    html.H3("üß™ Enzyme Summary"),

    html.Button("‚¨áÔ∏è Download Enzyme Summary", id="download-button-summary", n_clicks=0),
    dcc.Download(id="download-summary-csv"),

    html.Br(), html.Br(),

    dash_table.DataTable(
        id="summary", page_size=10,
        style_table={'overflowX': 'auto'},
        style_cell={'textAlign': 'left'}
    )
])

@app.callback(
    Output("table", "data"),
    Output("table", "columns"),
    Output("summary", "data"),
    Output("summary", "columns"),
    Output("download-dataframe-csv", "data"),
    Output("download-summary-csv", "data"),
    Input("bacterium-dropdown", "value"),
    Input("pathway-dropdown", "value"),
    Input("enzyme-dropdown", "value"),
    Input("download-button-data", "n_clicks"),
    Input("download-button-summary", "n_clicks"),
    prevent_initial_call=True
)
def update_outputs(selected_bacteria, selected_pathways, selected_enzymes,
                   download_data_clicks, download_summary_clicks):

    filtered_df = df.copy()

    if selected_bacteria and "All" not in selected_bacteria:
        filtered_df = filtered_df[filtered_df["Bacterium"].isin(selected_bacteria)]
    if selected_pathways and "All" not in selected_pathways:
        filtered_df = filtered_df[filtered_df["Pathway Name"].isin(selected_pathways)]
    if selected_enzymes and "All" not in selected_enzymes:
        filtered_df = filtered_df[filtered_df["Enzyme Name"].isin(selected_enzymes)]

    summary_df = filtered_df["Enzyme Name"].value_counts().reset_index()
    summary_df.columns = ["Enzyme Name", "Count"]

    # Determinar qual bot√£o foi clicado
    triggered_id = ctx.triggered_id

    download_data = no_update
    download_summary = no_update

    if triggered_id == "download-button-data":
        download_data = dcc.send_data_frame(filtered_df.to_csv, "filtered_data.csv", index=False)
    elif triggered_id == "download-button-summary":
        download_summary = dcc.send_data_frame(summary_df.to_csv, "enzyme_summary.csv", index=False)

    return (
        filtered_df.to_dict("records"),
        [{"name": i, "id": i} for i in filtered_df.columns],
        summary_df.to_dict("records"),
        [{"name": i, "id": i} for i in summary_df.columns],
        download_data,
        download_summary
    )

if __name__ == "__main__":
    app.run(debug=False)